完善之前由 Spring 和 Spring MVC 完成的 CRM 项目: 添加完整的权限管理功能
2018.01.02
1. 底层数据访问由 JdbcTemplate 改为 Hibernate
2. 使用 hibernate 重写 po 类
    2.1 角色与用户之间是多对多关系
        维护关系: 由用户 User 维护
    2.2 角色与资源之间是多对多关系
        维护关系; 由角色 Role 维护
    2.3 资源表中 parent 自关联
2018.01.03
3. 完成登陆页面和登陆逻辑
    3.1 使用过滤器检查是否登陆
    3.2 增加安全退出功能
4. 数据库改为 MySql, 方便部署项目
5. 为用户分配角色
    5.1 同步到数据库中的 crm_user_role 表
    5.2 新页面上进行角色分配
6. 为角色分配资源
    6.1 使用模态框结合 ztree 插件进行资源分配
    6.2 数据可以同步到 crm_role_resource 表
2018.01.04
7. 检查用户操作: 控制权限
    7.1 需要控制权限的方法上加上自定义注解
    7.2 拦截器中检查当前角色是否有访问该方法的权限
        7.2.1 从数据库中查询出当前登陆用户所有角色, 以及各个角色的所有权限列表
        7.2.2 获取当前访问访问方法上的权限注解
        7.2.3 从列表中查询, 如果有则放行, 否则就抛出异常
    7.3 获取抛出的权限访问异常, 然后返回到指定的权限异常处理页面
    注意: 管理权限如 SYS_MANAGE 对应菜单, 而功能权限如 SYS_USER_VIEW 对应方法; 而功能权限属于管理权限的子权限, 有子权限一定有
    父权限, 但是反过来不一定.
8. 当删除角色时, 如果有用户依赖于该角色, 直接删除角色会出错, 需要先断开联系;
    8.1 删除角色同样有该问题存在
    8.2 删除方法需要重写 hashcode() 和 equals() 方法
9. 修改项目使其与文档匹配
10. 增加部门管理
11. 增加部门表, Dept 类
    11.1 部门与用户之间是一对多的关系, 部门为一, 用户为多
    11.2 由用户维护关系
2018.01.05
12. 动态生成菜单
    12.1 根据当前用户的资源列表, 显示其应该显示的菜单
    12.2 因为当前用户已经存在于 session 中, 从 menu.jsp 页面可以读取到当前用户所有信息
    12.3 从 user 中取出 roles, 然后 role 里面包含 resource
    问题: 修改用户自己时, session 中的 user 对象, 不能同步更新, 导致页面上获取到的不是最新的 user 对象, 页面不能同步刷新;
    只有退出重新登录后, 才能生效;
    只有在分配角色和分配资源时, 会出现该问题, 所以可以在这两步操作中, 同步更新 session 中 user 对象
    取消集合的懒加载特性, 使其能在页面上获取到
    功能完成
13. 菜单管理
    将资源一分为2, 菜单管理页面显示菜单项, 而资源管理页面显示所有的功能
    因为共享一张表, 所以只需要复用 资源的增删改查 即可
    只需要修改查询方法, 分开查询

14. 删除部门增加确认模态框
15. 修改项目使其与实际相符
16. 点击部门名称后, 跳转到用户页面, 显示当前部门所有用户
17. 动态显示用户页面所有按钮, 如果有权限则显示出来
    17.1 在返回页面显示之前, 即 index() 方法里, 查询出当前登陆用户所有权限, 存入 set 集合中
    17.2 在页面上判断该集合中是否包含显示该按钮的权限, 比如 sys_user_save 代表添加用户, 如果有则显示按钮
    17.3 为使其更具有通用性, 应该在过滤器中进行查询, 然后就可以用在所有页面上了; 添加到登陆过滤器中进行处理
18. 资源页面只显示资源, 不显示菜单
19. 找回密码, 学习使用 javaMail 功能; 在 LoginController 进行处理
    19.1 发送一封邮件给该用户注册时填写的邮箱; 邮箱里包含改密码的链接地址, 到 restPassword.jsp 页面
    19.2 修改密码: 填入用户名以及新密码即可
20. 投诉管理
    20.1 投诉属于客服部, 只有客服部人员才能进入客服部查看信息
    20.2 在投诉管理中, 默认每个用户只有一个角色; 根据角色常量进行判断当前登陆用户的权限, 如果是客户经理则显示完整页面; 暂时只考虑客服经理
    20.3 投诉表: Complaint
        同一条记录可能会有多个处理方式; 处理方式单独建表, 外键依赖于投诉表, 一对多关系
        一条记录只能由一个客服记录, 然后由一个售后进行处理, 处理方式多种
    20.4 在用户表增加与投诉记录表的对应关系: 一个用户可以处理多条投诉记录, 但是一条投诉记录只能由一个用户进行处理
21. 客服添加投诉
    添加投诉时, 状态默认为: 未指派; 使用隐藏域提交
    修改投诉, 先查询出当前该客服所提交的所有投诉, 然后增加修改按钮
22. 主管处理投诉
    查看所有未处理投诉：ajax 请求
    指派售后: 先查询出所有售后人员(ajax); 指派后, 发出 ajax 请求, 参数包括: 指派的售后人员编号, 当前投诉编号
    在 service 中修改记录中的售后人员编号以及投诉状态, 投诉状态改为: 未处理
23. 售后处理投诉
    只限当前售后被指派的投诉记录
    修改后提交数据库: 新增 HandleMethod, 并为 Complaint 设置, 设置处理方式字段以及处理开始时间(当前时间); 同时修改 Complaint 状态
    为未回访;




其他: 可选
1. 菜单页面, 点击菜单管理后, 打开菜单列表; 完成

2. 忘记密码, 通过邮件找回

3. 修改分配角色页面, 是用表格更清晰的表现结构; 需要角色表和部门关联;


细节部分:
1. 优化命名

bug:
1. 当前用户将自己从用户表中删除, 会报错;
    控制权限, 只有管理员才有删除用户权限; 且只有管理员才能控制权限
    管理员删除自己?
    解决: 删除用户的方法中进行判断, 当前删除用户是否和当前登陆用户 id 相同, 相同则不允许操作;
2. 更新时, 已有内容如果没有设置新内容, 会被擦除掉
    当修改维护主键的对象时, 其中保存其他保存其他对象的集合会被清空, 如修改用户, 传入到服务器的 user 对象中 roles 集合为 null
    将会把 crm_user_role 中的对应记录删除掉, 关系断开, 当前用户失去所有角色
    解决: 在传入到 service 层之前, 查出原来的对象, 并为传过来的对象设置集合属性
    问题: 修改角色时, 用户会同步更新, 但是角色原先分配的资源被清空
    更新: 应该是正常现象, 如果没有设置新集合, 更新时就会清空原来的对象的集合
    如果想要保留之前的角色或资源怎么做? 先查出来, 然后为当前对象设置集合, 然后调用 merge() 方法更新而不是 update() 方法, 因为查询
    操作会在当前 session 中缓存一个对象, 如果再调用 update() 方法将会导致重复

当前用户进行修改属于自己的用户信息, 角色或是资源时会出现以下问题:
3. 因为当前 session 中已经保存有当前登陆用户对象, 所以再次修改当前用户时, 会报错: 当前 session 中已经存在同 id 的对象, 导致无法修改; 修改角色同样出错
4. 无法修改属于自己的资源, 不属于自己的资源可以修改, 当前 session 中已经存在同 id 对象; 关闭拦截器后, 即可正常修改
    有可能是因为拦截器中已经获取过资源对象

    解决 3 和 4: 将 update() 方法修改为 merge() 方法即可

5. 用户一旦修改自己的用户, 将立即失去角色, 导致后续操作显示无权限;
    同样, 如果一旦修改自己唯一的角色信息, 那么也会立即失去所有资源, 后续操作显示无权限
    解决: 同2

6. 点击部门管理后, 点击部门管理会同时展开菜单管理, 不合理;
    已解决

7. 动态地为当前登陆用户修改或重新分配资源后, 菜单列表不会显示;
    解决: 修改当前登陆用户资源时, 强制退出; 修改角色会即时生效, 无需退出

8. 添加或者修改资源时没写父节点会报错; 由于父节点为空导致
    错误: TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: com.cdsxt.po.Resource
    解决: 如果不允许为空, 那么如果需要添加根节点(没有父节点) 怎么办? 在 service 层中判断, 如果 parent 的 id 为 null, 则直接设置 parent=null

9. 因为页面上判断菜单时, 使用的是资源集合长度最长的集合, 但是假如用户具有多个角色, 这些角色之间有交集, 但个角色之间有不同的部分, 那么将会失去部分菜单
    解决: 同 17; 在过滤器中获取到所有资源对象, 并去重, 返回并集结果即可; 并且可以减少 menu.jsp 的循环次数